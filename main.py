import os, glob
import re
import zipfile
import xml.etree.ElementTree as ET
import shutil
from time import sleep
import openpyxl
from bs4 import BeautifulSoup
import csv

list_encum = []

utilization_code = {
    '141000000000':	'Для размещения объектов сельскохозяйственного назначения и сельскохозяйственных угодий',
    '141001000000':	'Для сельскохозяйственного производства',
    '141001010000':	'Для использования в качестве сельскохозяйственных угодий',
    '141001020000':	'Для размещения зданий, строений, сооружений, используемых для производства, хранения и '
                       'первичной переработки сельскохозяйственной продукции',
    '141001030000':	'Для размещения внутрихозяйственных дорог и коммуникаций',
    '141001040000':	'Для размещения водных объектов',
    '141002000000':	'Для ведения крестьянского (фермерского) хозяйства',
    '141003000000':	'Для ведения личного подсобного хозяйства',
    '141004000000':	'Для ведения гражданами садоводства и огородничества',
    '141005000000':	'Для ведения гражданами животноводства',
    '141006000000':	'Для дачного строительства',
    '141007000000':	'Для размещения древесно-кустарниковой растительности, предназначенной для защиты земель от '
                       'воздействия негативных (вредных) природных, антропогенных и техногенных явлений',
    '141008000000':	'Для научно-исследовательских целей',
    '141009000000':	'Для учебных целей',
    '141010000000':	'Для сенокошения и выпаса скота гражданами',
    '141011000000':	'Фонд перераспределения',
    '141012000000': 'Для размещения объектов охотничьего хозяйства',
    '141013000000':	'Для размещения объектов рыбного хозяйства',
    '141014000000':	'Для иных видов сельскохозяйственного использования',
    '142000000000':	'Для размещения объектов, характерных для населенных пунктов',
    '142001000000':	'Для объектов жилой застройки',
    '142001010000':	'Для индивидуальной жилой застройки',
    '142001020000':	'Для многоквартирной застройки',
    '142001020100':	'Для малоэтажной застройки',
    '142001020200':	'Для среднеэтажной застройки',
    '142001020300':	'Для многоэтажной застройки',
    '142001020400':	'Для иных видов жилой застройки',
    '142001030000': 'Для размещения объектов дошкольного, начального, общего и среднего (полного) общего образования',
    '142001040000':	'Для размещения иных объектов, допустимых в жилых зонах и не перечисленных в классификаторе',
    '142002000000':	'Для объектов общественно-делового значения',
    '142002010000':	'Для размещения объектов социального и коммунально-бытового назначения',
    '142002020000':	'Для размещения объектов здравоохранения',
    '142002030000':	'Для размещения объектов культуры',
    '142002040000':	'Для размещения объектов торговли',
    '142002040100':	'Для размещения объектов розничной торговли',
    '142002040200':	'Для размещения объектов оптовой торговли',
    '142002050000':	'Для размещения объектов общественного питания',
    '142002060000':	'Для размещения объектов предпринимательской деятельности',
    '142002070000':	'Для размещения объектов среднего профессионального и высшего профессионального образования',
    '142002080000':	'Для размещения административных зданий',
    '142002090000':	'Для размещения научно-исследовательских учреждений',
    '142002100000':	'Для размещения культовых зданий',
    '142002110000':	'Для стоянок автомобильного транспорта',
    '142002120000':	'Для размещения объектов делового назначения, в том числе офисных центров',
    '142002130000':	'Для размещения объектов финансового назначения',
    '142002140000':	'Для размещения гостиниц',
    '142002150000':	'Для размещения подземных или многоэтажных гаражей',
    '142002160000':	'Для размещения индивидуальных гаражей',
    '142002170000':	'Для размещения иных объектов общественно-делового значения, обеспечивающих жизнь граждан',
    '142003000000':	'Для общего пользования (уличная сеть)',
    '142004000000':	'Для размещения объектов специального назначения',
    '142004010000':	'Для размещения кладбищ',
    '142004020000':	'Для размещения крематориев',
    '142004030000':	'Для размещения скотомогильников',
    '142004040000':	'Под объектами размещения отходов потребления',
    '142004050000':	'Под иными объектами специального назначения',
    '142005000000':	'Для размещения коммунальных, складских объектов',
    '142006000000':	'Для размещения объектов жилищно-коммунального хозяйства',
    '142007000000':	'Для иных видов использования, характерных для населенных пунктов',
    '143000000000': 'Для размещения объектов промышленности, энергетики, транспорта, связи, радиовещания,'
                    ' телевидения, информатики, обеспечения космической деятельности, обороны, безопасности '
                    'и иного специального назначения',
    '143001000000':	'Для размещения промышленных объектов',
    '143001010000':	'Для размещения производственных и административных зданий, строений, сооружений и '
                       'обслуживающих их объектов',
    '143001010100':	'Для размещения производственных зданий',
    '143001010200':	'Для размещения коммуникаций',
    '143001010300':	'Для размещения подъездных путей',
    '143001010400':	'Для размещения складских помещений',
    '143001010500':	'Для размещения административных зданий',
    '143001010600':	'Для размещения культурно-бытовых зданий',
    '143001010700':	'Для размещения иных сооружений промышленности',
    '143001020000':	'Для добычи и разработки полезных ископаемых',
    '143001030000':	'Для размещения иных объектов промышленности',
    '143002000000':	'Для размещения объектов энергетики',
    '143002010000':	'Для размещения электростанций и обслуживающих сооружений и объектов',
    '143002010100':	'Для размещения гидроэлектростанций',
    '143002010200':	'Для размещения атомных станций',
    '143002010300': 'Для размещения ядерных установок',
    '143002010400':	'Для размещения пунктов хранения ядерных материалов и радиоактивных веществ энергетики',
    '143002010500':	'Для размещения хранилищ радиоактивных отходов',
    '143002010600':	'Для размещения тепловых станций',
    '143002010700':	'Для размещения иных типов электростанций',
    '143002010800':	'Для размещения иных обслуживающих сооружений и объектов',
    '143002020000':	'Для размещения объектов электросетевого хозяйства',
    '143002020100':	'Для размещения воздушных линий электропередачи',
    '143002020200':	'Для размещения наземных сооружений кабельных линий электропередачи',
    '143002020300':	'Для размещения подстанций',
    '143002020400':	'Для размещения распределительных пунктов',
    '143002020500': 'Для размещения других сооружений и объектов электросетевого хозяйства',
    '143002030000':	'Для размещения иных объектов энергетики',
    '143003000000':	'Для размещения объектов транспорта',
    '143003010000':	'Для размещения и эксплуатации объектов железнодорожного транспорта',
    '143003010100':	'Для размещения железнодорожных путей и их конструктивных элементов',
    '143003010200':	'Для размещения полос отвода железнодорожных путей',
    '143003010300':	'Для размещения, эксплуатации, расширения и реконструкции строений, зданий, сооружений, '
                       'в том числе железнодорожных вокзалов, железнодорожных станций, а также устройств и '
                       'других объектов, необходимых для эксплуатации, содержания, строительства, реконструкции, '
                       'ремонта, развития наземных и подземных зданий, строений, сооружений, '
                       'устройств и других объектов железнодорожного транспорта',
    '143003010301':	'Для размещения железнодорожных вокзалов',
    '143003010302':	'Для размещения железнодорожных станций',
    '143003010303':	'Для размещения устройств и других объектов, необходимых для эксплуатации, содержания, '
                       'строительства, реконструкции, ремонта, развития наземных и подземных зданий, строений, '
                       'сооружений, устройств и других объектов железнодорожного транспорта',
    '143003020000':	'Для размещения и эксплуатации объектов автомобильного транспорта и объектов дорожного хозяйства',
    '143003020100':	'Для размещения автомобильных дорог и их конструктивных элементов',
    '143003020200':	'Для размещения полос отвода',
    '143003020300':	'Для размещения объектов дорожного сервиса в полосах отвода автомобильных дорог',
    '143003020400':	'Для размещения дорожных сооружений',
    '143003020500': 'Для размещения автовокзалов и автостанций',
    '143003020600':	'Для размещения иных объектов автомобильного транспорта и дорожного хозяйства',
    '143003030000':	'Для размещения и эксплуатации объектов морского, внутреннего водного транспорта',
    '143003030100':	'Для размещения искусственно созданных внутренних водных путей',
    '143003030200':	'Для размещения морских и речных портов, причалов, пристаней',
    '143003030300':	'Для размещения иных объектов морского, внутреннего водного транспорта',
    '143003030400':	'Для выделения береговой полосы',
    '143003040000':	'Для размещения и эксплуатации объектов воздушного транспорта',
    '143003040100':	'Для размещения аэропортов и аэродромов',
    '143003040200':	'Для размещения аэровокзалов',
    '143003040300':	'Для размещения взлетно-посадочных полос',
    '143003040400':	'Для размещения иных наземных объектов воздушного транспорта',
    '143003050000':	'Для размещения и эксплуатации объектов трубопроводного транспорта',
    '143003050100':	'Для размещения нефтепроводов',
    '143003050200':	'Для размещения газопроводов',
    '143003050300':	'Для размещения иных трубопроводов',
    '143003050400':	'Для размещения иных объектов трубопроводного транспорта',
    '143003060000':	'Для размещения и эксплуатации иных объектов транспорта',
    '143004000000':	'Для размещения объектов связи, радиовещания, телевидения, информатики',
    '143004010000':	'Для размещения эксплуатационных предприятий связи и обслуживания линий связи',
    '143004020000':	'Для размещения кабельных, радиорелейных и воздушных линий связи и линий радиофикации на '
                       'трассах кабельных и воздушных линий связи и радиофикации и их охранные зоны',
    '143004030000':	'Для размещения подземных кабельных и воздушных линий связи и радиофикации и их охранные зоны',
    '143004040000':	'Для размещения наземных и подземных необслуживаемых усилительных пунктов на кабельных линиях '
                       'связи и их охранные зоны',
    '143004050000':	'Для размещения наземных сооружений и инфраструктур спутниковой связи',
    '143004060000':	'Для размещения иных объектов связи, радиовещания, телевидения, информатики',
    '143005000000':	'Для размещения объектов, предназначенных для обеспечения космической деятельности',
    '143005010000':	'Для размещения космодромов, стартовых комплексов и пусковых установок',
    '143005020000':	'Для размещения командно-измерительных комплексов, центров и пунктов управления полетами '
                       'космических объектов, приема, хранения и переработки информации',
    '143005030000':	'Для размещения баз хранения космической техники',
    '143005040000':	'Для размещения полигонов приземления космических объектов и взлетно-посадочных полос',
    '143005050000':	'Для размещения объектов экспериментальной базы для отработки космической техники',
    '143005060000':	'Для размещения центров и оборудования для подготовки космонавтов',
    '143005070000':	'Для размещения других наземных сооружений и техники, используемых при осуществлении '
                       'космической деятельности',
    '143006000000':	'Для размещения объектов, предназначенных для обеспечения обороны и безопасности',
    '143006010000':	'Для обеспечения задач обороны',
    '143006010100':	'Для размещения военных организаций, учреждений и других объектов',
    '143006010200':	'Для дислокации войск и сил флота',
    '143006010300':	'Для проведения учений и иных мероприятий',
    '143006010400':	'Для испытательных полигонов',
    '143006010500':	'Для мест уничтожения оружия и захоронения отходов',
    '143006010600':	'Для создания запасов материальных ценностей в государственном и мобилизационном резервах '
                       '(хранилища, склады и другие)',
    '143006010700':	'Для размещения иных объектов обороны',
    '143006020000':	'Для размещения объектов (территорий), обеспечивающих защиту и охрану Государственной границы '
                       'Российской Федерации',
    '143006020100':	'Для обустройства и содержания инженерно-технических сооружений и заграждений',
    '143006020200':	'Для обустройства и содержания пограничных знаков',
    '143006020300':	'Для обустройства и содержания пограничных просек',
    '143006020400': 'Для обустройства и содержания коммуникаций',
    '143006020500':	'Для обустройства и содержания пунктов пропуска через Государственную границу Российской Федерации',
    '143006020600':	'Для размещения иных объектов для защиты и охраны Государственной границы Российской Федерации',
    '143006030000':	'Для размещения иных объектов обороны и безопасности',
    '143007000000':	'Для размещения иных объектов промышленности, энергетики, транспорта, связи, радиовещания, '
                       'телевидения, информатики, обеспечения космической деятельности, обороны, безопасности и '
                       'иного специального назначения',
    '144000000000':	'Для размещения особо охраняемых историко-культурных и природных объектов (территорий)',
    '144001000000':	'Для размещения особо охраняемых природных объектов (территорий)',
    '144001010000':	'Для размещения государственных природных заповедников (в т.ч. биосферных)',
    '144001020000':	'Для размещения государственных природных заказников',
    '144001030000':	'Для размещения национальных парков',
    '144001040000':	'Для размещения природных парков',
    '144001050000':	'Для размещения дендрологических парков',
    '144001060000':	'Для размещения ботанических садов',
    '144001070000':	'Для размещения объектов санаторного и курортного назначения',
    '144001080000':	'Территории месторождений минеральных вод, лечебных грязей, рапы лиманов и озер',
    '144001090000':	'Для традиционного природопользования',
    '144001100000':	'Для размещения иных особо охраняемых природных территорий (объектов)',
    '144002000000':	'Для размещения объектов (территорий) природоохранного назначения',
    '144003000000':	'Для размещения объектов (территорий) рекреационного назначения',
    '144003010000':	'Для размещения домов отдыха, пансионатов, кемпингов',
    '144003020000':	'Для размещения объектов физической культуры и спорта',
    '144003030000':	'Для размещения туристических баз, стационарных и палаточных туристско-оздоровительных лагерей, '
                       'домов рыболова и охотника, детских туристических станций',
    '144003040000':	'Для размещения туристических парков',
    '144003050000':	'Для размещения лесопарков',
    '144003060000':	'Для размещения учебно-туристических троп и трасс',
    '144003070000':	'Для размещения детских и спортивных лагерей',
    '144003080000':	'Для размещения скверов, парков, городских садов',
    '144003090000':	'Для размещения пляжей',
    '144003100000':	'Для размещения иных объектов (территорий) рекреационного назначения',
    '144004000000':	'Для размещения объектов историко-культурного назначения',
    '144004010000':	'Для размещения объектов культурного наследия народов Российской Федерации (памятников истории '
                       'и культуры), в том числе объектов археологического наследия',
    '144004020000':	'Для размещения военных и гражданских захоронений',
    '144005000000':	'Для размещения иных особо охраняемых историко-культурных и природных объектов (территорий)',
    '145000000000':	'Для размещения объектов лесного фонда',
    '145001000000':	'Для размещения лесной растительности',
    '145002000000':	'Для восстановления лесной растительности',
    '145003000000': 'Для прочих объектов лесного хозяйства',
    '146000000000':	'Для размещения объектов водного фонда',
    '146001000000':	'Под водными объектами',
    '146002000000':	'Для размещения гидротехнических сооружений',
    '146003000000':	'Для размещения иных сооружений, расположенных на водных объектах',
    '147000000000':	'Земли запаса (неиспользуемые)'
}

category_parcels_type = {
    '003001000000': 'ЗЕМЛИ СЕЛЬСКОХОЗЯЙСТВЕННОГО НАЗНАЧЕНИЯ',
    '003001000010': 'Сельскохозяйственные угодья',
    '003001000020': 'Земельные участки, занятые внутрихозяйственными дорогами, коммуникациями, '
                    'лесными насаждениями, предназначенными для обеспечения защиты земель от '
                    'негативного воздействия, водными объектами, а также занятые зданиями, '
                    'сооружениями, используемыми для производства, хранения и первичной '
                    'переработки сельскохозяйственной продукции',
    '003001000030': 'Прочие земельные участки из состава земель сельскохозяйственного назначения',
    '003002000000': 'ЗЕМЛИ НАСЕЛЕННЫХ ПУНКТОВ',
    '003002000010': 'Земельные участки, отнесенные к зонам сельскохозяйственного использования',
    '003002000020': 'Земельные участки, занятые жилищным фондом и объектами инженерной инфраструктуры '
                    'жилищно-коммунального комплекса',
    '003002000030': 'Земельные участки, приобретенные (предоставленные) для индивидуального жилищного строительства',
    '003002000040': 'Земельные участки, приобретенные (предоставленные) на условиях осуществления на них жилищного '
                    'строительства (за исключением индивидуального жилищного строительства',
    '003002000060': 'Земельные участки, приобретенные (предоставленные) для ведения личного подсобного хозяйства'
                    ' садоводства и огородничества или животноводства, а также дачного хозяйства',
    '003002000090': 'Земельные участки, отнесенные к производственным территориальным зонам и зонам '
                    'инженерных и транспортных инфраструктур',
    '003002000110': 'Земельные участки для обеспечения обороны',
    '003002000120': 'Земельные участки для обеспечения безопасности',
    '003002000130': 'Земельные участки для обеспечения таможенных нужд',
    '003002000100': 'Прочие земельные участки',
    '003003000000': 'ЗЕМЛИ ПРОМЫШЛЕННОСТИ, ЭНЕРГЕТИКИ, ТРАНСПОРТА, СВЯЗИ, РАДИОВЕЩАНИЯ, ТЕЛЕВИДЕНИЯ, ИНФОРМАТИКИ, '
                    'ЗЕМЛИ ДЛЯ ОБЕСПЕЧЕНИЯ КОСМИЧЕСКОЙ ДЕЯТЕЛЬНОСТИ, ЗЕМЛИ ОБОРОНЫ, БЕЗОПАСНОСТИ И ЗЕМЛИ ИНОГО '
                    'СПЕЦИАЛЬНОГО НАЗНАЧЕНИЯ',
    '003003000010': 'Земельные участки из состава земель промышленности',
    '003003000020': 'Земельные участки из состава земель энергетики',
    '003003000030': 'Земельные участки из состава земель транспорта',
    '003003000040': 'Земельные участки из состава земель связи, радиовещания, телевидения, информатики',
    '003003000060': 'Земельные участки из состава земель обороны',
    '003003000070': 'Земельные участки из состава земель безопасности',
    '003008000010': 'Земельные участки из состава земель для обеспечения таможенных нужд',
    '003003000080': 'Земельные участки из состава земель иного специального назначения',
    '003004000000': 'ЗЕМЛИ ОСОБО ОХРАНЯЕМЫХ ТЕРРИТОРИЙ И ОБЪЕКТОВ',
    '003005000000': 'ЗЕМЛИ ЛЕСНОГО ФОНДА',
    '003006000000': 'ЗЕМЛИ ВОДНОГО ФОНДА',
    '003007000000': 'ЗЕМЛИ ЗАПАСА',
    '003008000000': 'ЗЕМЕЛЬНЫЕ УЧАСТКИ, ДЛЯ КОТОРЫХ КАТЕГОРИЯ ЗЕМЕЛЬ НЕ УСТАНОВЛЕНА',
}

chek_realty_type = {
    '002001002000': 'Здание',
    '002001003000': 'Помещение',
    '002001004000': 'Сооружение',
    '002001005000': 'Объект незавершённого строительства',
    '002001006000': 'Предприятие как имущественный комплекс',
    '002001008000': 'Единый недвижимый комплекс',
    '002001009000': 'Машино-место',
    '002001010000': 'Иной объект недвижимости'
}
owner_type = {
    '001001000000': 'Собственность (индивидуальная)',
    '001002000000': 'Долевая собственность',
    '001003000000': 'Совместная собственность',
    '001004000000': 'Хозяйственное ведение',
    '001005000000': 'Оперативное управление',
    '001006000000': 'Пожизненное наследуемое владение',
    '001007000000': 'Постоянное (бессрочное) пользование',
    '001009000000': 'Владение, пользование и распоряжение Центральным банком Российской Федерации',
    '001011000000': 'Отказ от права собственности, постоянного (бессрочного) пользования, пожизненного наследуемого '
                    'владения на земельный участок либо об отказе от права собственности на земельную долю',
    '022010000000': 'Доверительное управление (ПИФ)',
    '022006000000': 'Аренда',
    '022097001000': 'Концессия'
}
encum_type = {
    '022001000000': 'Сервитут',
    '022001001000': 'Публичный сервитут',
    '022001002000': 'Частный сервитут',
    '022002000000': 'Арест',
    '022003000000': 'Запрещение регистрации',
    '022004000000': 'Ограничения прав на земельный участок, предусмотренные статьями '
                    '56, 56.1 Земельного кодекса Российской Федерации',
    '022004001000': 'Ограничения прав на земельный участок, предусмотренные статьей '
                    '56 Земельного кодекса Российской Федерации',
    '022004002000': 'Ограничения прав на земельный участок, предусмотренные статьей 56.1 '
                    'Земельного кодекса Российской Федерации',
    '022005000000': 'Решение об изъятии земельного участка, жилого помещения',
    '022006000000': 'Аренда',
    '022007000000': 'Ипотека',
    '022008000000': 'Ипотека в силу закона',
    '022009000000': 'Безвозмездное (срочное) пользование земельным/лесным участком',
    '022010000000': 'Доверительное управление',
    '022011000000': 'Рента',
    '022012000000': 'Запрет на совершение действий в сфере ГКУ в отношении ОН',
    '022013000000': 'Наем жилого помещения',
    '022014000000': 'Безвозмездное пользование (ссуда)',
    '022015000000': 'Объект культурного наследия',
    '022016000000': 'Концессия',
    '022017000000': 'Ограничение оборотоспособности земельных участков, '
                    'предусмотренное статьей 11 Федерального закона 119-ФЗ',
    '022018000000': 'Залог в качестве меры пресечения',
    '022099000000': 'Прочие ограничения прав и обременения объекта недвижимости'
}

subject_num = {'01': 'Республика Адыгея (Адыгея)', '02': 'Республика Башкортостан', '03': 'Республика Бурятия',
               '04': 'Республика Алтай', '05': 'Республика Дагестан', '06': 'Республика Ингушетия',
               '07': 'Кабардино-Балкарская Республика', '08': 'Республика Калмыкия',
               '09': 'Карачаево-Черкесская Республика', '10': 'Республика Карелия', '11': 'Республика Коми',
               '12': 'Республика Марий Эл', '13': 'Республика Мордовия', '14': 'Республика Саха (Якутия)',
               '15': 'Республика Северная Осетия Алания',
               '16': 'Республика Татарстан (Татарстан)', '17': 'Республика Тыва', '18': 'Удмуртская Республика',
               '19': 'Республика Хакасия', '20': 'Чеченская Республика', '21': 'Чувашская Республика Чувашия',
               '22': 'Алтайский край', '23': 'Краснодарский край', '24': 'Красноярский край', '25': 'Приморский край',
               '26': 'Ставропольский край', '27': 'Хабаровский край', '28': 'Амурская область',
               '29': 'Архангельская область', '30': 'Астраханская область', '31': 'Белгородская область',
               '32': 'Брянская область', '33': 'Владимирская область', '34': 'Волгоградская область',
               '35': 'Вологодская область', '36': 'Воронежская область', '37': 'Ивановская область',
               '38': 'Иркутская область', '39': 'Калининградская область', '40': 'Калужская область',
               '41': 'Камчатский край', '42': 'Кемеровская область', '43': 'Кировская область',
               '44': 'Костромская область', '45': 'Курганская область', '46': 'Курская область',
               '47': 'Ленинградская область', '48': 'Липецкая область', '49': 'Магаданская область',
               '50': 'Московская область', '51': 'Мурманская область', '52': 'Нижегородская область',
               '53': 'Новгородская область', '54': 'Новосибирская область', '55': 'Омская область',
               '56': 'Оренбургская область', '57': 'Орловская область', '58': 'Пензенская область',
               '59': 'Пермский край', '60': 'Псковская область', '61': 'Ростовская область',
               '62': 'Рязанская область', '63': 'Самарская область', '64': 'Саратовская область',
               '65': 'Сахалинская область', '66': 'Свердловская область', '67': 'Смоленская область',
               '68': 'Тамбовская область', '69': 'Тверская область', '70': 'Томская область',
               '71': 'Тульская область', '72': 'Тюменская область', '73': 'Ульяновская область',
               '74': 'Челябинская область', '75': 'Забайкальский край', '76': 'Ярославская область',
               '77': 'г. Москва', '78': 'г. Санкт-Петербург', '79': 'Еврейская автономная область',
               '83': 'Ненецкий автономный округ', '86': 'Ханты-Мансийский автономный округ – Югра',
               '87': 'Чукотский автономный округ', '89': 'Ямало-Ненецкий автономный округ', '91': 'Республика Крым',
               '92': 'г. Севастополь', '99': 'Иные территории, включая город и космодром Байконур'
               }


def input_path_zip():
    '''вводим путь до выписок ЕГРН
    возвращаем список zip архивов и путь к ним'''
    while True:
        path_zip_files = input('Введите путь, по которому находятся выписки ЕГРН: ')
        if re.match(r'^[A-Z]:\\', path_zip_files) is not None:
            try:
                list_files = os.listdir(path_zip_files)
                return list_files, path_zip_files
            except FileNotFoundError:
                print('Введенный путь отсутствует, попробуйте ввести другой')
        else:
            print('Введен неверный путь, попробуйте еще раз')


def zipfile_extractall_first(list_file, path):
    '''разархивируем первый раз в папку \test и возвращаем список файлов'''
    for file in list_file:
        try:
            with zipfile.ZipFile(path + '\\' + file, 'r') as z:
                z.extractall(path + '\\test')
        except PermissionError:
            print('Extracting...')
    return os.listdir(path + '\\test')


def zipfile_extractall_second(list_file, path):
    '''разархивируем второй раз в папку \test и возвращаем список xml файлов'''
    for file in list_file:
        if zipfile.is_zipfile(path + file):
            try:
                with zipfile.ZipFile(path + file, 'r') as z:
                    z.extractall(path)
            except FileNotFoundError:
                print('Extracting...')
    os.chdir(path)
    return glob.glob("kv*.xml")


def xml_read(list_path):
    '''получаем список xml файлов и возвращаем элемент ET'''
    i = 0
    for file in list_path:
        # xml_ET = ET.parse(file).getroot()
        # xml_scrap(xml_ET)
        xml_bs(file)


def xml_bs(xml):
    with open(xml, encoding='utf-8') as file:
        bs_content = BeautifulSoup(file.read(), 'lxml')
        if bs_content.find('realty'):  # для не ЗУ
            dict_result = {
                'Кадастровый номер': bs_content.find('realty').findNext().attrs['cadastralnumber'],
                'Кадастровый номер;': bs_content.find('realty').findNext().attrs['cadastralnumber'] + ';',
                'Номер запроса': bs_content.find('declarattribute').attrs['requerynumber'],
                'Дата присвоения кадастрового номера': bs_content.find('realty').findNext().attrs['datecreated']
            }
            dict_result['Кадастровые номера иных объектов недвижимости, в пределах ' \
                        'которых расположен объект недвижимости'] = \
                chek_Nonetype(bs_content.find('cadastralnumberoks'))
            dict_result['Наименование'] = chek_realty_type[chek_Nonetype(bs_content.find('objecttype'))]
            # if dict_result['адрес'] == '':
            #    if bs_content.find('adrs:level3') and bs_content.find('address'):
            #         dict_result['адрес'] = bs_content.find('address').find('adrs:postalcode').text + ', ' + \
            #                                subject_num[bs_content.find('address').find('adrs:region').text] + ', ' + \
            #                                bs_content.find('adrs:street').attrs['name'] + \
            #                                bs_content.find('adrs:street').attrs['type'] + ' , ' + \
            #                                bs_content.find('adrs:level1').attrs['type'] + ' ' + \
            #                                bs_content.find('adrs:level1').attrs['value'] + ' ' + \
            #                                bs_content.find('adrs:level3').attrs['type'] + ' ' + \
            #                                bs_content.find('adrs:level3').attrs['value']
            #     else:
            #         dict_result['адрес'] = bs_content.find('address').find('adrs:postalcode').text + ', ' + \
            #                                subject_num[bs_content.find('address').find('adrs:region').text] + ', ' + \
            #                                bs_content.find('adrs:street').attrs['name'] + \
            #                                bs_content.find('adrs:street').attrs['type'] + ' , ' + \
            #                                bs_content.find('adrs:level1').attrs['type'] + ' ' + \
            #                                bs_content.find('adrs:level1').attrs['value']
            # else:
        if bs_content.find('parcels'):  # для ЗУ
            dict_result = {
                'Кадастровый номер': bs_content.find('parcels').findNext().attrs['cadastralnumber'],
                'Кадастровый номер;': bs_content.find('parcels').findNext().attrs['cadastralnumber'] + ';',
                'Номер запроса': bs_content.find('declarattribute').attrs['requerynumber'],
                'Дата присвоения кадастрового номера': bs_content.find('parcels').findNext().attrs['datecreated']
            }
            dict_result['Кадастровые номера расположенных в пределах земельного участка объектов недвижимости'] = \
                chek_Nonetype(bs_content.find('innercadastralnumbers'))
            dict_result['Наименование'] = 'Земельный участок'
            dict_result['specialnote'] = chek_Nonetype(bs_content.find('specialnote'))
            dict_result['Категория ЗУ'] = category_parcels_type[chek_Nonetype(bs_content.find('category'))]
            try:
                dict_result['Вид разрешенного использования'] = \
                    utilization_code[bs_content.find('Utilization').attrs['Utilization']]
            except:
                pass
            try:
                dict_result['Вид разрешенного использования'] = \
                    utilization_code[bs_content.find('utilization').attrs['utilization']]
            except:
                pass

        dict_result['адрес'] = chek_Nonetype(bs_content.find('adrs:note'))
        if bs_content.find('area'):
            dict_result['Площадь, кв.м.'] = bs_content.find('area').nextSibling.strip('\n')
        if bs_content.find('cadastralcost'):
            dict_result['Кадастровая стоимость'] = bs_content.find('cadastralcost').attrs['value'] + ' рублей'
        for elem in bs_content.find_all('encumbrance'):
            encum_str = ''
            print(encum_type[elem.find('type').text], end=' ')
            encum_str = encum_type[elem.find('type').text]
            if elem.find('term'):
                print(elem.find('term').text, end=' ')
                encum_str = encum_str + ' ' + elem.find('term').text
            if elem.find('stopped'):
                print(elem.find('stopped').text, end=' ')
                encum_str = encum_str + ' ' + elem.find('stopped').text
            if elem.find('owner'):
                if elem.find('person'):
                    print('в пользу', elem.find('person').find('content').text)
                    encum_str = encum_str + ' в пользу ' + elem.find('person').find('content').text
                elif elem.find('organization'):
                    print('в пользу', elem.find('organization').find('content').text)
                    encum_str = encum_str + ' в пользу ' + elem.find('organization').find('content').text
            list_encum.append(encum_str)
        dict_result['Обременения'] = list_encum

        print(dict_result)
        list_encum.clear()
        to_excel(dict_result)
        # print(dict_result)
        print('-' * 50)
        # print(bs_content)


def chek_Nonetype(bs):
    if bs is None:
        return ''
    else:
        return bs.text


def to_excel(dictionary):
    with open('ЕГРН.csv', 'a') as f:
        writer = csv.DictWriter(f, fieldnames=list(dictionary.keys()))
        writer.writeheader()
        writer.writerow(dictionary)


# def writer_to_excel(text):
#     wb = openpyxl.Workbook()
#     # sheet = wb.active
#     # # col = 'A'  # буква столбца, куда будет писаться информация
# # wb['A1'] = nl[2][1]['CadastralNumber']
# # wb[col + str(i)] = nl[2][1]['DateCreated']
# wb.save('ЕГРН.xlsx')


# def xml_scrap(xml):
#     '''собираем всю информацию (tag, attrib, text всех элементов) в 3 списка, далее...'''
#     mylist1 = [item.tag for item in xml.iter()]
#     mylist2 = [item.attrib for item in xml.iter()]
#     mylist3 = [item.text for item in xml.iter()]
#     new_list = list(zip(mylist1, mylist2, mylist3))
#     list_parser(new_list)


# [2][1]['CadastralNumber']
# [2][1]['DateCreated']
# def list_parser(nl):
# # print(nl)
# # if 'KPOKS' in nl[0][0]:
# wb = openpyxl.Workbook()
# sheet = wb.active
# # col = 'A'  # буква столбца, куда будет писаться информация
# # wb['A1'] = nl[2][1]['CadastralNumber']
# # wb[col + str(i)] = nl[2][1]['DateCreated']
# wb.save('ЕГРН.xlsx')
# list_result.append(nl[2][1]['CadastralNumber'])
# list_result.append(nl[2][1]['DateCreated'])
# dict_result['Кадастровый номер'] = nl[2][1]['CadastralNumber']
# dict_result['Дата присвоения кадастрового номера'] = nl[2][1]['DateCreated']


# def bs_parse():
#     with open("C:\\Users\\derip\\OneDrive\\Рабочий стол\\Новая папка (4)\\kv_3e204e14-80d8-4fae-88d5-"
#               "1daa89fe47b5.xml", encoding='utf-8') as file:
#         bs_content = BeautifulSoup(file.read(), 'lxml')
#         print(bs_content.find('innercadastralnumbers').text)
#         print(bs_content)


list_zip_files, path_zip = input_path_zip()
# создаем папку \test:
try:
    os.mkdir(path_zip + '\\test')
except FileExistsError:
    print('папка \\test уже создана')

list_test = zipfile_extractall_first(list_zip_files, path_zip)
new_path = path_zip + '\\test\\'

list_xml_files = zipfile_extractall_second(list_test, new_path)
xml_read(list_xml_files)
# print(list_result)
if glob.glob("obj*.xml"):
    print('файл типа obj: ')
    for name_file in glob.glob("obj*.xml"):
        print(name_file)

# shutil.rmtree(new_path, True)
# print(list_result)
# print(dict_result)
